package com.cst438.controller;

import com.cst438.domain.*;
import com.cst438.dto.EnrollmentDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.security.Principal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@RestController
@CrossOrigin(origins = "http://localhost:3000")
public class StudentController {

    @Autowired
    CourseRepository courseRepository;

    @Autowired
    SectionRepository sectionRepository;

    @Autowired
    TermRepository termRepository;

    @Autowired
    UserRepository userRepository;

    @Autowired
    EnrollmentRepository enrollmentRepository;

    // studentId will be temporary until Login security is implemented
    //example URL  /transcript?studentId=19803

    // student gets transcript showing list of all enrollments
    @GetMapping("/transcripts")
    @PreAuthorize("hasAuthority('SCOPE_ROLE_STUDENT')")
    public List<EnrollmentDTO> getTranscript(Principal principal) {

        User student = userRepository.findByEmail(principal.getName());

         if (student == null) {
             throw new ResponseStatusException(HttpStatus.NOT_FOUND, "user id not found");
         }

         List<Enrollment> enrollments = enrollmentRepository.findEnrollmentsByStudentIdOrderByTermId(student.getId());
         List<EnrollmentDTO> dlist = new ArrayList<>();
         for (Enrollment e : enrollments) {
            dlist.add( new EnrollmentDTO(
                    e.getEnrollmentId(),
                    e.getGrade(),
                    student.getId(),
                    student.getName(),
                    student.getEmail(),
                    e.getSection().getCourse().getCourseId(),
                    e.getSection().getSecId(),
                    e.getSection().getSectionNo(),
                    e.getSection().getBuilding(),
                    e.getSection().getRoom(),
                    e.getSection().getTimes(),
                    e.getSection().getCourse().getCredits(),
                    e.getSection().getTerm().getYear(),
                    e.getSection().getTerm().getSemester()));
         }
         return dlist;
    }

    // student gets a list of their enrollments for the given year, semester
    // user must be student
    // studentId will be temporary until Login security is implemented
    @GetMapping("/enrollments")
    @PreAuthorize("hasAuthority('SCOPE_ROLE_STUDENT')")
    public List<EnrollmentDTO> getSchedule(
            @RequestParam("year") int year,
            @RequestParam("semester") String semester,
            Principal principal) {

        User student = userRepository.findByEmail(principal.getName());

        List<Enrollment> enrollments = enrollmentRepository.findByYearAndSemesterOrderByCourseId(year, semester, student.getId());

        if(enrollments == null){
            throw  new ResponseStatusException( HttpStatus.NOT_FOUND, "section with given year and semester not found");
        }

        List<EnrollmentDTO> schedule = new ArrayList<>();
        for (Enrollment e : enrollments) {
            EnrollmentDTO dto = new EnrollmentDTO(e.getEnrollmentId(), e.getGrade(), e.getUser().getId(), e.getUser().getName(),
                    e.getUser().getEmail(), e.getSection().getCourse().getCourseId(), e.getSection().getSecId(),
                    e.getSection().getSectionNo(), e.getSection().getBuilding(), e.getSection().getRoom(),
                    e.getSection().getTimes(), e.getSection().getCourse().getCredits(), e.getSection().getTerm().getYear(),
                    e.getSection().getTerm().getSemester());

            schedule.add(dto);
        }
        return schedule;
    }


    // student adds enrollment into a section
    // user must be student
    // return EnrollmentDTO with enrollmentId generated by database
    @PostMapping("/enrollments/sections/{sectionNo}")
    @PreAuthorize("hasAuthority('SCOPE_ROLE_STUDENT')")
    public EnrollmentDTO addCourse(
            @PathVariable int sectionNo,
            Principal principal) {
        
        User student = userRepository.findByEmail(principal.getName());

        Enrollment e = enrollmentRepository.findEnrollmentBySectionNoAndStudentId(sectionNo, student.getId());
       if (e!=null) {
           throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "already enrolled in this section");
       }
       e = new Enrollment();
       //User student = userRepository.findById(studentId).orElse(null);
       if (student==null) {
           throw new ResponseStatusException(HttpStatus.NOT_FOUND, "student id not found");
       }
       e.setUser(student);
       Section section = sectionRepository.findById(sectionNo).orElse(null);
       if (section == null) {
           throw new ResponseStatusException(HttpStatus.NOT_FOUND, "section number not found");
       }
       Date now = new Date();
       if (now.before(section.getTerm().getAddDate()) || now.after(section.getTerm().getAddDeadline())) {
           throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "cannot enroll in this section due to date");
        }
       e.setSection(section);
       enrollmentRepository.save(e);
       return new EnrollmentDTO(
               e.getEnrollmentId(),
               e.getGrade(),
               student.getId(),
               student.getName(),
               student.getEmail(),
               e.getSection().getCourse().getCourseId(),
               e.getSection().getSecId(),
               e.getSection().getSectionNo(),
               e.getSection().getBuilding(),
               e.getSection().getRoom(),
               e.getSection().getTimes(),
               e.getSection().getCourse().getCredits(),
               e.getSection().getTerm().getYear(),
               e.getSection().getTerm().getSemester());

    }

    // student drops a course
    // user must be student
    @DeleteMapping("/enrollments/{enrollmentId}")
    @PreAuthorize("hasAuthority('SCOPE_ROLE_STUDENT')")
    public void dropCourse(@PathVariable("enrollmentId") int enrollmentId) {
        Optional<Enrollment> enrollmentOpt = enrollmentRepository.findById(enrollmentId);

        if (enrollmentOpt.isEmpty()) {
            return;
        }

        Enrollment enrollment = enrollmentOpt.get();

        Date dropDeadline = enrollment.getSection().getTerm().getDropDeadline();
        Date today = new Date();

        if (today.after(dropDeadline)) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Cannot drop course after the drop deadline");
        }
        
        enrollmentRepository.deleteById(enrollmentId);
    }
}